# 主要理解，*与**主要作用类似于js的...运算符，即解构和透传

'''


1. 乘法运算符号

a=1
b=2
c=a*b

2. 收集列表中多余的值
这样无需确保值与变量的个数相同。举例来说：

a,b,*c=[1,2,3,4]
>>> c 为 [3,4] # c前面的*号主要是为了收集参数。这样输出a，是1；输出b，是2，输出c，是[3,4]。注意这里收集的是列表。

3. 涉及到函数了，*号的作用在于收集参数或者分配参数。
具体用途，是看用*号的场合是在函数定义时还是函数调用时。

  定义函数时，
      一个*的情况：
          def myprint(*params):
              print(params)
          
          myprint(1,2,3)
          >>> （1,2,3）

      两个星号
          def myprint2(**params):
              print(params)
          这样调用myprint2就不会有问题：
          >>> myprint2(x=1,y=2,z=3)
          会输出如下结果：{'z':3,'x':1,'y':2}， 得到一个字典。
  调用函数时
      一个*的情况： 
          def myprint(x,y):
              print(x)
              print(y)
          此时函数接受两个参数，x与y，但我调用的时候只想传入一个参数，何如
          params=(1,2)  # 那么调用的时候
          myprint(*params) # 用于解构元组列表
      两个**的情况    
          params={'x':1,'y':2} # 调用函数的的入参
          myprint(*#params) # 用于解构字典
'''